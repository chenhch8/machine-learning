!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
DTree	dtree.py	/^class DTree(object):$/;"	c
FEATURE	utils.py	/^FEATURE = get_value('FEATURE')$/;"	v
GDBT	gbdt.py	/^class GDBT(object):$/;"	c
SUM	utils.py	/^SUM = get_value('SUM')$/;"	v
__author__	dtree.py	/^__author__ = 'chenhch8'$/;"	v
__author__	gbdt.py	/^__author__ = 'chenhch8'$/;"	v
__author__	globalVar.py	/^__author__ = 'chenhch8'$/;"	v
__author__	run.py	/^__author__ = 'chenhch8'$/;"	v
__author__	utils.py	/^__author__ = 'chenhch8'$/;"	v
__bestBoundary	dtree.py	/^  def __bestBoundary(self, feature, randomIndex):$/;"	m	class:DTree	file:
__calcLoss	gbdt.py	/^  def __calcLoss(self, dtree):$/;"	m	class:GDBT	file:
__findBestBoundary	dtree.py	/^  def __findBestBoundary(self, trainDataIndex, features):$/;"	m	class:DTree	file:
__init__	dtree.py	/^  def __init__(self, leaf_size = 50):$/;"	m	class:DTree
__init__	gbdt.py	/^  def __init__(self, tree_size, leaf_size):$/;"	m	class:GDBT
__predictHelper	gbdt.py	/^  def __predictHelper(self, my_data, my_class, name):$/;"	m	class:GDBT	file:
__setLeaf	dtree.py	/^  def __setLeaf(self, trainIndex, _tree):$/;"	m	class:DTree	file:
__setNLeaf	dtree.py	/^  def __setNLeaf(self, feature, index, _tree):$/;"	m	class:DTree	file:
__swap	utils.py	/^def __swap(indexList, i, j):$/;"	f	file:
build	dtree.py	/^  def build(self, trainDataIndex, features):$/;"	m	class:DTree
buildGDBT	gbdt.py	/^  def buildGDBT(self):$/;"	m	class:GDBT
calcMean	utils.py	/^def calcMean(trainDataIndex):$/;"	f
choice	run.py	/^  choice = input('1. 训练模型； 2. 预测数据：')$/;"	v
choice	run.py	/^  choice = int(choice)$/;"	v
decrease	utils.py	/^def decrease(feature, lists):$/;"	f
feature	utils.py	/^  feature = 0$/;"	v
filename	run.py	/^    filename = os.path.join('..', 'data', 'train_data_small.txt')$/;"	v
filename	run.py	/^    filename = os.path.join('..', 'output', 'gbdt_result.json')$/;"	v
getTree	dtree.py	/^  def getTree(self):$/;"	m	class:DTree
get_value	globalVar.py	/^def get_value(key):$/;"	f
indexs	utils.py	/^  indexs = list(range(train_data.shape[1]))$/;"	v
init	globalVar.py	/^def init():$/;"	f
loadJson	utils.py	/^def loadJson(filename):$/;"	f
loadTrainData	utils.py	/^def loadTrainData(filename, pen = 0.9):$/;"	f
mid	utils.py	/^  mid = train_data[feature][10]$/;"	v
myGdbt	run.py	/^    myGdbt = GDBT(tree_size, leaf_size)$/;"	v
pitch	utils.py	/^def pitch(lists, n = 100):$/;"	f
predict	dtree.py	/^  def predict(self, sample):$/;"	m	class:DTree
predictTestData	gbdt.py	/^  def predictTestData(self):$/;"	m	class:GDBT
quitSlice	utils.py	/^def quitSlice(index, k, indexList):$/;"	f
quitSort	utils.py	/^def quitSort(index, left, right, indexList):$/;"	f
saveJson	utils.py	/^def saveJson(filename, jsObj):$/;"	f
saveName	run.py	/^    saveName = os.path.join('..', 'output', 'test_result.txt')$/;"	v
setTree	dtree.py	/^  def setTree(self, tree):$/;"	m	class:DTree
set_value	globalVar.py	/^def set_value(key, value):$/;"	f
startPredict	gbdt.py	/^  def startPredict(self, filename, test_filename, saveName):$/;"	m	class:GDBT
test_filename	run.py	/^    test_filename = os.path.join('..', 'data', 'test_data.txt')$/;"	v
train_data	utils.py	/^  train_data = np.random.randint(1,10,size=(1,20))$/;"	v

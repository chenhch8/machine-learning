!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
DataSet	data.py	/^class DataSet:$/;"	c
LeafNode	tree.py	/^class LeafNode:$/;"	c
Model	model.py	/^class Model:$/;"	c
Tree	tree.py	/^class Tree:$/;"	c
__construct_instance__	data.py	/^    def __construct_instance__(self,fields):$/;"	m	class:DataSet	file:
__init__	data.py	/^    def __init__(self,filename):  ## just for csv data format$/;"	m	class:DataSet
__init__	model.py	/^    def __init__(self,max_iter,sample_rate,learn_rate,max_depth,split_points=0):$/;"	m	class:Model
__init__	tree.py	/^    def __init__(self):$/;"	m	class:Tree
__init__	tree.py	/^    def __init__(self,idset):$/;"	m	class:LeafNode
compute_instance_f_value	model.py	/^    def compute_instance_f_value(self,instance,label_valueset):$/;"	m	class:Model
compute_loss	model.py	/^    def compute_loss(self,dataset,subset,f):$/;"	m	class:Model
compute_min_loss	tree.py	/^def compute_min_loss(values):$/;"	f
compute_residual	model.py	/^    def compute_residual(self,dataset,subset,f):$/;"	m	class:Model
construct_decision_tree	tree.py	/^def construct_decision_tree(dataset,remainedSet,targets,depth,leafNodes,max_depth,split_points=0):$/;"	f
data	data.py	/^    data=DataSet(argv[1]);$/;"	v
describe	data.py	/^    def describe(self):$/;"	m	class:DataSet
describe	tree.py	/^    def describe(self):$/;"	m	class:LeafNode
describe	tree.py	/^    def describe(self,addtion_info=""):$/;"	m	class:Tree
get_attributes	data.py	/^    def get_attributes(self):$/;"	m	class:DataSet
get_distinct_valueset	data.py	/^    def get_distinct_valueset(self,name):$/;"	m	class:DataSet
get_idset	tree.py	/^    def get_idset(self):$/;"	m	class:LeafNode
get_instance	data.py	/^    def get_instance(self,Id):$/;"	m	class:DataSet
get_instances_idset	data.py	/^    def get_instances_idset(self):$/;"	m	class:DataSet
get_label_size	data.py	/^    def get_label_size(self,name="label"):$/;"	m	class:DataSet
get_label_valueset	data.py	/^    def get_label_valueset(self,name="label"):$/;"	m	class:DataSet
get_predict_value	tree.py	/^    def get_predict_value(self):$/;"	m	class:LeafNode
get_predict_value	tree.py	/^    def get_predict_value(self,instance):$/;"	m	class:Tree
initialize	model.py	/^    def initialize(self,f,dataset):$/;"	m	class:Model
input_filename	gbt.py	/^        input_filename=argv[1];$/;"	v
input_filename	gbt.py	/^    input_filename="data\/adult.data.csv";$/;"	v
input_filename	gbt.py	/^    input_filename="data\/adult_part.csv";$/;"	v
is_real_type_field	data.py	/^    def is_real_type_field(self,name):$/;"	m	class:DataSet
learn_rate	gbt.py	/^        learn_rate=float(argv[5]);$/;"	v
main	gbt.py	/^def main(data_filename,stat_filename,max_iter,sample_rate,learn_rate,max_depth,split_points):$/;"	f
max_depth	gbt.py	/^        max_depth=int(argv[6]);$/;"	v
max_iter	gbt.py	/^        max_iter=int(argv[3]);$/;"	v
predict_label	model.py	/^    def predict_label(self,instance,label_valueset):$/;"	m	class:Model
sample_rate	gbt.py	/^        sample_rate=float(argv[4]);$/;"	v
size	data.py	/^    def size(self):$/;"	m	class:DataSet
split_points	gbt.py	/^        split_points=int(argv[7]);$/;"	v
stat_filename	gbt.py	/^        stat_filename=argv[2];$/;"	v
test	model.py	/^    def test(self,dataset,test_data):$/;"	m	class:Model
train	model.py	/^    def train(self,dataset,train_data,stat_file,test_data=None):$/;"	m	class:Model
update_f_value	model.py	/^    def update_f_value(self,f,tree,leafNodes,subset,dataset,label):$/;"	m	class:Model
update_predict_value	tree.py	/^    def update_predict_value(self,targets,K): ## K is number of class, just for classification$/;"	m	class:LeafNode
